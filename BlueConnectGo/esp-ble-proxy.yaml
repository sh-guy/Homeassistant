substitutions:
  devicename: esp-ble-proxy
  entityname: esp_ble_proxy
  blueriiot_mac: !secret blueriiot_mac
  blueriiot_name_prefix: !secret blueriiot_nameprefix
  blueriiot_id_prefix: !secret blueriiot_idprefix
  
  # send true 0x01 to this service ID
  blueriiot_send_service_uuid: 'F3300001-F0A2-9B06-0C59-1BC4763B5C00'
  blueriiot_send_characteristic_uuid: 'F3300002-F0A2-9B06-0C59-1BC4763B5C00'
  
  # notification is received on this Service ID                  
  blueriiot_receive_service_uuid: 'F3300001-F0A2-9B06-0C59-1BC4763B5C00'
  blueriiot_receive_characteristic_uuid: 'F3300003-F0A2-9B06-0C59-1BC4763B5C00'

esphome:
  name: ${devicename}
  friendly_name: ESP BLE Proxy

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  #level: VERY_VERBOSE
  #level: INFO
  #level: VERBOSE
  #level: DEBUG

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

safe_mode:

wifi:
  reboot_timeout: 0s
  fast_connect: true
  networks:
    - ssid: !secret wifi_ssid1
      password: !secret wifi_password1
#    - ssid: !secret wifi_ssid2
#      password: !secret wifi_password2
#    - ssid: !secret wifi_ssid3
#      password: !secret wifi_password3
  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "${devicename} Fallback Hotspot"

#captive_portal:

web_server:
  port: 80
  version: 2
  auth:
    username: admin
    password: !secret web_server_password

# Enable BLE Tracker
esp32_ble_tracker:
  scan_parameters:
    active: false
    interval: 5000ms
    window: 100ms
  on_ble_advertise:
    - mac_address: ${blueriiot_mac}
      then:
        - logger.log: 
            format: "Found Blueriiot sensor"
            level: "INFO"
ble_client:
  - mac_address: ${blueriiot_mac}
    id: ble_client_${blueriiot_id_prefix}
    on_connect: 
      then:
        - logger.log: 
            format: "Connected to Blueriiot sensor"
            level: "INFO"
        - lambda: "id(binary_sensor_${blueriiot_id_prefix}_connected).publish_state(true);"
        - delay: 2s
        - button.press: button_${blueriiot_id_prefix}_doreading
    on_disconnect: [lambda: "id(binary_sensor_${blueriiot_id_prefix}_connected).publish_state(false);"]

# Enable Bluetooth Proxy
#bluetooth_proxy:
#  active: true

switch:
  - platform: ble_client
    ble_client_id: ble_client_${blueriiot_id_prefix}
    name: "${blueriiot_name_prefix} Enable"
    id: switch_${blueriiot_id_prefix}_enable
  - platform: restart
    name: "${entityname} Restart"
    id: reset


# Temperature Input
one_wire:
  - platform: gpio
    pin:
      number: GPIO02
      mode:
        input: true
        pullup: true
 
sensor:
  # WiFi Signal
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${entityname} WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 120s
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${entityname} WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
  # Temperature Sensors
  - platform: dallas_temp
    address: 0xe33c69045786c028
    name: "${entityname} Aussentemperatur"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-plus"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    update_interval: 300s
  - platform: dallas_temp
    address: 0xda3ce60457aa1e28
    name: "${entityname} Saunatemperatur"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-plus"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    update_interval: 300s
    filters:
      - calibrate_linear:
        - 8.8 -> 10.2
        - 17.2 -> 20.5
        - 52.0 -> 65.0
    #  - quantile:
    #    window_size: 7
    #    send_every: 2
    #    send_first_at: 1
    #  - lambda: if (x < 3) return 0; else return x;
# Blueriiot Blue Connect Go Sensor
  - platform: template
    id: binary_sensor_${blueriiot_id_prefix}_connected
    name: ${blueriiot_name_prefix} Status
    device_class: signal_strength
    entity_category: diagnostic
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_temperature
    name: ${blueriiot_name_prefix} Temperature
    # Optional variables:
    unit_of_measurement: "°C"
    icon: "mdi:water-thermometer"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_ph
    name: ${blueriiot_name_prefix} pH
    unit_of_measurement: "pH"
    # Optional variables:
    #icon: "mdi:water-percent"
    state_class: "measurement"
    accuracy_decimals: 1
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_orp
    name: ${blueriiot_name_prefix} ORP
    unit_of_measurement: "mV"
    #icon: "mdi:water-percent"
    device_class: "voltage"
    state_class: "measurement"
    accuracy_decimals: 1
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_bat
    name: ${blueriiot_name_prefix} Battery
    unit_of_measurement: "%"
    icon: "mdi:battery"
    device_class: "battery"
    state_class: "measurement"
    accuracy_decimals: 1
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_salt
    name: ${blueriiot_name_prefix} Salt
    # Optional variables:
    unit_of_measurement: "g/L"
    icon: "mdi:water-percent"
    state_class: "measurement"
    accuracy_decimals: 1
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_cond
    name: ${blueriiot_name_prefix} Conductivity
    # Optional variables:
    unit_of_measurement: "mS/cm"
    #icon: "mdi:water-percent"
    state_class: "measurement"
    accuracy_decimals: 1

## Blue Connect
button:
  - platform: template
    id: button_${blueriiot_id_prefix}_doreading
    name: ${blueriiot_name_prefix} do reading
    internal: true
    on_press:
      then:
        - ble_client.ble_write:
            id: ble_client_${blueriiot_id_prefix}
            service_uuid: ${blueriiot_send_service_uuid}
            characteristic_uuid: ${blueriiot_send_characteristic_uuid}
            value: !lambda |-
              return {0x01};

text_sensor:
  - platform: ble_client
    id: ${blueriiot_id_prefix}_reading_data
    name: ${blueriiot_name_prefix} reading data
    internal: true
    ble_client_id: ble_client_${blueriiot_id_prefix}
    service_uuid: ${blueriiot_receive_service_uuid}
    characteristic_uuid: ${blueriiot_receive_characteristic_uuid}
    notify: true
    update_interval: never
    on_notify:
      then:
       - lambda: |-
          std::string rawhex = format_hex_pretty((uint8_t *) x.c_str(), x.size()).c_str();
          ESP_LOGD("raw_hex", "%s", rawhex.c_str());

          float temperature = (float)((int16_t)(x[2]<< 8) + x[1])/100;
          ESP_LOGD("temp", "%f", temperature);
          id(sensor_${blueriiot_id_prefix}_temperature).publish_state(temperature);
              
          float raw_ph = (float)( (int16_t) (x[4]<< 8) + x[3]);
          float ph = (float)( (int16_t) (2048 - raw_ph)) / 232  + 7;
          ESP_LOGD("ph", "%f", ph);
          id(sensor_${blueriiot_id_prefix}_ph).publish_state(ph);
          
          float orp = (float)( (int16_t) (x[6]<< 8) + x[5]) / 3.86 - 21.57826;
          ESP_LOGD("orp", "%f", orp);
          id(sensor_${blueriiot_id_prefix}_orp).publish_state(orp);
          
          float bat = (float)( (int16_t) x[11]) / 36 * 100;
          ESP_LOGD("bat", "%f", bat);
          id(sensor_${blueriiot_id_prefix}_bat).publish_state(bat);
          
          id(switch_${blueriiot_id_prefix}_enable).turn_off();


